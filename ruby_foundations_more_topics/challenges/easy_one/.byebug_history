exit
distance.chars.size
distance.size
strand.size
exit
strand.chars[2] == other_strand.chars[2]
strand.chars[1] == other_strand.chars[1]
strand.chars[0] == other_strand.chars[0]
strand.chars[0] == other_strand.chars
strand.chars
exit
selected_multiples
exit
selected_multiples
exit
selected_multiples
exit
numbers
multiples
selected_multiples.reduce(:+)
selected_multiples
exit
6%3
3 % 6
num
next
num
next
num
next
num
next
num
next
num
next
num
next
num
next
num
exit
sums
exit
continue
exit
sums
exit-program
!!!
conitnue
continue
exit
numbers
sums
exit
sums
next
n * (8**power)
exit
power.upto(10) { |i| print i, " " }
 power = (numbers.size - 1)
power.upto(10) { |i| print i, " " }
numbers.size - 1
numbers.size
exit
next
counter
next
counter
next
counter
next
counter
exit
digit
next
digit * 8**ex
ex
digit
exit
next
index
next
index
next
index
next
index
next
index
next
index
next
index
next
current_element
next
current_element
next
current_element
next
current_element
next
current_element
next
numbers
next
numbers
next
exit
current_element
numbers[counter + 1]
next
current_element
next
result
next
numbers[counter+1]
next
current_element
exit
digits[index..index + n]
(digits[index..index + n].size) - 1
array
next
array
next
array
digits[index..index + n - 1]
(digits[index..index + n].size) - 1
(digits[index..index + n].size)
next
exit
next
digits[index..index + n - 1]
next
(digits[index..index + n].size) - 1
exit
digits[index..index + n].size
